---
layout: post
title:      "Rails Route Helper Methods"
date:       2019-07-19 21:47:55 +0000
permalink:  rails_route_helper_methods
---


If you've spent any time learning/using Rails, then you know it's a very magical language where lots of things that you would otherwise have to code manually, just seem to work. Sometimes that makes it hard to truly grasp why something is happening and where it's coming from. Rails routing fell into this category for me.  

For each of your application's routes, Rails automatically creates corresponding path and url helper methods that can be used rather than hard coding.  Below is  a list of the named path helpers that are generated by Rails. Each of these helpers has a corresponding _url helper (such as songs_url).

## Named Helpers

| Verb | Path | Action | Path Helper| URL Helper|
| -------- | -------- | -------- |-------- |-------- |
| GET   | /songs | index   | songs_path  | songs_url |
| GET   | /songs/new  | new   | new_song_path | new_song_url|
| POST  | /songs  | create   | songs_path  | songs_url|
| GET   | /songs/:id  | show  | song_path(:id)  | song_url(:id)|
| GET   | /songs/:id/edit  | edit   | edit_song_path(:id)  | edit_song_url(:id) |
| PUT/PATCH   | /songs/:id | update   | song_path(:id)  |song_url(:id) |
| DELETE   | /songs/:id  | destroy  | song_path(:id) | song_url(:id)  |

## Path Example

Let's say we have a new Rails app that creates and stores a list of songs with the following attributes: name, artist, genre.


We'll want to have an index page that lists all of the songs, a new page where a new song can be created, and a show page where individual song data can be found so our ```config/routes.rb``` file will look like the below:

![Imgur](https://i.imgur.com/bsfoTmW.png)

We'll want to create methods for each of our routes, so our ```app/controllers/songs_controller.rb``` file will have the following:
![Imgur](https://i.imgur.com/8pYMH0E.png)

And in ```app/views/songs/index.html.erb```, we'll want to iterate through all of our songs for the song name and link to it.
![Imgur](https://i.imgur.com/Oq349wK.png)

We can see that we're referencing path helpers in the``` index.html.erb``` file as well as the in the create method in ```songs_controller.rb```. 


### The Index Page
Lets focus on how this method is being used on the index page first.
```
  def index
    @songs = Song.all
  end
```
In our songs_controller.rb, we're creating an insance variable @songs that contains all songs in the db.

```
  <% @songs.each do |song| %>
    <div><%= link_to song.name, song_path(song) %> by <%= song.artist %></div>
  <% end %>
```
Then in our ```index.html.erb file```, we're iterating through ```@songs``` to get to each song object. Since we want to display each song name and link to it's show page, for each iteration  we'll use the link_to method (another Rails helper) to say we want the link text to be song.name and we want to call the built in path helper method for the show page on that song id.  

Side note: although we're passing along the whole song instance in ```song_path(song)```, Rails is just using the song ID. We could just as easily have used ```song_path(song.id)```.

### The Create Page
The path helper for the show page is also being used in the create method in the ```songs_controller.rb``` file.  

```
  def create
    @song = Song.create(song_params)
    redirect_to song_path(@song)
  end
```
Here we've created a new song instance and set the ```@song``` instance variable to it.  Once the song has been created, we want to redirect the user to that songs show page, so we've called ```song_path(@song)```, passing along the instance of song that we've just created.

## URL vs. Path Helpers
URL helpers are similar to path, except their return values are prefixed with the current host, port and path prefix. URL helpers are used when referencing a link outside of your application such as an RSS feed.

## Still fuzzy?

### Finding the methods available for your application

1. In command line, from inside of your app directory: ```rails console```
2. If you're using Rails 5, input the following: ```helpers = Rails.application.routes.named_routes.helper_names```. For Rails 4, use: ```helpers = Rails.application.routes.named_routes.helpers```
3.  You'll see that your new variable ```helpers``` returns a large array of all of the helpers available for your routes.  If you want to see only the path and url helpers for your application: ```helpers.select {|h| h.to_s.include?("song") }```.  This returns: ```["songs_path", "new_song_path", "song_path", "songs_url", "new_song_url", "song_url"]```

### Other Resources

[Rails Routing Documentation](https://guides.rubyonrails.org/routing.html)
[API Dock Resources](https://apidock.com/rails/ActionDispatch/Routing/Mapper/Scoping/Resources/resources)
[URL Vs. Path Helpers](https://stackoverflow.com/questions/11939865/named-routes-path-vs-url)


